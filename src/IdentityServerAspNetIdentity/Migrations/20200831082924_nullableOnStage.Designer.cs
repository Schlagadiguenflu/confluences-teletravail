// <auto-generated />
using System;
using IdentityServerAspNetIdentity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IdentityServerAspNetIdentity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200831082924_nullableOnStage")]
    partial class nullableOnStage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.AnnouncePage", b =>
                {
                    b.Property<int>("AnnouncePageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnnouncePageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.HasKey("AnnouncePageId");

                    b.ToTable("AnnouncePages");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.AnnouncePageLink", b =>
                {
                    b.Property<int>("AnnouncePageLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnnouncePageId")
                        .HasColumnType("integer");

                    b.Property<string>("AnnouncePageLinkLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AnnouncePageLinkName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AnnouncePageLinkId");

                    b.HasIndex("AnnouncePageId");

                    b.ToTable("AnnouncePageLinks");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("GenderId")
                        .HasColumnType("smallint");

                    b.Property<bool>("HasSeenHelpVideo")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PathImage")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("TypeAffiliationId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("WantsMoreHomeworks")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("TypeAffiliationId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppointmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AppointmentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.AppointmentStudent", b =>
                {
                    b.Property<int>("AppointmentStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AppointmentStudentId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("AppointmentStudents");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateurId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("EntrepriseId")
                        .HasColumnType("integer");

                    b.Property<string>("Fax")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("ModificateurId")
                        .HasColumnType("text");

                    b.Property<string>("Natel")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Prenom")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TelFix")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.HasKey("ContactId");

                    b.HasIndex("CreateurId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("ModificateurId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Entreprise", b =>
                {
                    b.Property<int>("EntrepriseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Adr1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Adr2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CodePostal")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("CreateurId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDernierContact")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormateurIdDernierContact")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarque")
                        .HasColumnType("character varying(10000)")
                        .HasMaxLength(10000);

                    b.Property<string>("StagiaireIdDernierContact")
                        .HasColumnType("text");

                    b.Property<string>("TelFax")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("TelFix")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<int?>("TypeDomaineId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeEntrepriseId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeMoyenId")
                        .HasColumnType("integer");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("EntrepriseId");

                    b.HasIndex("CreateurId");

                    b.HasIndex("FormateurIdDernierContact");

                    b.HasIndex("StagiaireIdDernierContact");

                    b.HasIndex("TypeDomaineId");

                    b.HasIndex("TypeEntrepriseId");

                    b.HasIndex("TypeMoyenId");

                    b.ToTable("Entreprises");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.EntrepriseMetier", b =>
                {
                    b.Property<int>("EntrepriseId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeMetierId")
                        .HasColumnType("integer");

                    b.HasKey("EntrepriseId", "TypeMetierId");

                    b.HasIndex("TypeMetierId");

                    b.ToTable("EntrepriseMetiers");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.EntrepriseOffre", b =>
                {
                    b.Property<int>("EntrepriseId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOffreId")
                        .HasColumnType("integer");

                    b.HasKey("EntrepriseId", "TypeOffreId");

                    b.HasIndex("TypeOffreId");

                    b.ToTable("EntrepriseOffres");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Exercice", b =>
                {
                    b.Property<int>("ExerciceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AudioLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("CorrectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CorrectionLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExerciceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExerciceLink")
                        .HasColumnType("text");

                    b.Property<string>("ExerciceName")
                        .HasColumnType("text");

                    b.Property<bool>("IsHomeworkAdditionnal")
                        .HasColumnType("boolean");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TheoryId")
                        .HasColumnType("integer");

                    b.HasKey("ExerciceId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TheoryId");

                    b.ToTable("Exercices");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.ExerciceAlone", b =>
                {
                    b.Property<int>("ExerciceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AudioLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("CorrectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CorrectionLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExerciceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExerciceLink")
                        .HasColumnType("text");

                    b.Property<string>("ExerciceName")
                        .HasColumnType("text");

                    b.Property<int>("HomeworkV2Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHomeworkAdditionnal")
                        .HasColumnType("boolean");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExerciceId");

                    b.HasIndex("HomeworkV2Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ExercicesAlone");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Gender", b =>
                {
                    b.Property<short>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("GenderId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Homework", b =>
                {
                    b.Property<int>("HomeworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClassLink")
                        .HasColumnType("text");

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<string>("ExerciceLink")
                        .HasColumnType("text");

                    b.Property<string>("ExerciceName")
                        .HasColumnType("text");

                    b.Property<DateTime>("HomeworkDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HomeworkTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHomeworkAdditionnal")
                        .HasColumnType("boolean");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HomeworkId");

                    b.HasIndex("HomeworkTypeId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Homework");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkStudent", b =>
                {
                    b.Property<int>("HomeworkStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("HomeworkFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HomeworkFileTeacher")
                        .HasColumnType("text");

                    b.Property<int>("HomeworkId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HomeworkStudentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HomeworkStudentId");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworkStudents");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkType", b =>
                {
                    b.Property<int>("HomeworkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("HomeworkOrder")
                        .HasColumnType("integer");

                    b.Property<string>("HomeworkTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HomeworkTypeId");

                    b.ToTable("HomeworkTypes");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkV2", b =>
                {
                    b.Property<int>("HomeworkV2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("HomeworkTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HomeworkV2Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HomeworkV2Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HomeworkV2Id");

                    b.HasIndex("HomeworkTypeId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("HomeworkV2s");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkV2Student", b =>
                {
                    b.Property<int>("HomeworkV2StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ExerciceId")
                        .HasColumnType("integer");

                    b.Property<string>("HomeworkCommentaryTeacher")
                        .HasColumnType("text");

                    b.Property<string>("HomeworkFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HomeworkFileTeacher")
                        .HasColumnType("text");

                    b.Property<DateTime>("HomeworkStudentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HomeworkV2StudentId");

                    b.HasIndex("ExerciceId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworkV2Students");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkV2StudentExerciceAlone", b =>
                {
                    b.Property<int>("HomeworkV2StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ExerciceId")
                        .HasColumnType("integer");

                    b.Property<string>("HomeworkCommentaryTeacher")
                        .HasColumnType("text");

                    b.Property<string>("HomeworkFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HomeworkFileTeacher")
                        .HasColumnType("text");

                    b.Property<DateTime>("HomeworkStudentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HomeworkV2StudentId");

                    b.HasIndex("ExerciceId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworkV2StudentExerciceAlones");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.SchoolClassRoom", b =>
                {
                    b.Property<int>("SchoolClassRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ExplanationVideoLink")
                        .HasColumnType("text");

                    b.Property<string>("SchoolClassRoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SchoolClassRoomId");

                    b.ToTable("SchoolClassRooms");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.SchoolClassRoomExplanation", b =>
                {
                    b.Property<int>("SchoolClassRoomExplanationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AudioLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SchoolClassRoomId")
                        .HasColumnType("integer");

                    b.HasKey("SchoolClassRoomExplanationId");

                    b.HasIndex("SchoolClassRoomId");

                    b.ToTable("SchoolClassRoomExplanations");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SchoolClassRoomId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionNumberId")
                        .HasColumnType("integer");

                    b.HasKey("SessionId");

                    b.HasIndex("SchoolClassRoomId");

                    b.HasIndex("SessionNumberId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.SessionNumber", b =>
                {
                    b.Property<int>("SessionNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("SessionNumberId");

                    b.ToTable("SessionNumbers");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.SessionStudent", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.HasKey("SessionId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("SessionStudents");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.SessionTeacher", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherId")
                        .HasColumnType("text");

                    b.HasKey("SessionId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SessionTeachers");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Stage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionSuivi")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("Attestation")
                        .HasColumnType("boolean");

                    b.Property<string>("Bilan")
                        .HasColumnType("text");

                    b.Property<string>("CreateurId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Debut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntrepriseId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Fin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HoraireApresMidi")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("HoraireMatin")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<bool?>("Rapport")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarque")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("Repas")
                        .HasColumnType("boolean");

                    b.Property<string>("StagiaireId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Trajets")
                        .HasColumnType("boolean");

                    b.Property<int?>("TypeAnnonceId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeMetierId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeStageId")
                        .HasColumnType("integer");

                    b.HasKey("StageId");

                    b.HasIndex("CreateurId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("StagiaireId");

                    b.HasIndex("TypeAnnonceId");

                    b.HasIndex("TypeMetierId");

                    b.HasIndex("TypeStageId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Theory", b =>
                {
                    b.Property<int>("TheoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AudioLink")
                        .HasColumnType("text");

                    b.Property<int>("HomeworkV2Id")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TheoryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TheoryLink")
                        .HasColumnType("text");

                    b.Property<string>("TheoryName")
                        .HasColumnType("text");

                    b.HasKey("TheoryId");

                    b.HasIndex("HomeworkV2Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Theories");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.TypeAffiliation", b =>
                {
                    b.Property<int>("TypeAffiliationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Libelle")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeAffiliationId");

                    b.ToTable("TypeAffiliations");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.TypeAnnonce", b =>
                {
                    b.Property<int>("TypeAnnonceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Libelle")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("TypeAnnonceId");

                    b.ToTable("TypeAnnonces");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.TypeDomaine", b =>
                {
                    b.Property<int>("TypeDomaineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Libelle")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.HasKey("TypeDomaineId");

                    b.ToTable("TypeDomaines");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.TypeEntreprise", b =>
                {
                    b.Property<int>("TypeEntrepriseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeEntrepriseId");

                    b.ToTable("TypeEntreprises");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.TypeMetier", b =>
                {
                    b.Property<int>("TypeMetierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Libelle")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.HasKey("TypeMetierId");

                    b.ToTable("TypeMetiers");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.TypeMoyen", b =>
                {
                    b.Property<int>("TypeMoyenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("TypeMoyenId");

                    b.ToTable("TypeMoyens");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.TypeOffre", b =>
                {
                    b.Property<int>("TypeOffreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Libelle")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("TypeOffreId");

                    b.ToTable("TypeOffres");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.TypeStage", b =>
                {
                    b.Property<int>("TypeStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeStageId");

                    b.ToTable("TypeStages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.AnnouncePageLink", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.AnnouncePage", "AnnouncePage")
                        .WithMany()
                        .HasForeignKey("AnnouncePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.ApplicationUser", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeAffiliation", "TypeAffiliation")
                        .WithMany()
                        .HasForeignKey("TypeAffiliationId");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Appointment", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.AppointmentStudent", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Contact", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Createur")
                        .WithMany()
                        .HasForeignKey("CreateurId");

                    b.HasOne("IdentityServerAspNetIdentity.Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "ContactModificateur")
                        .WithMany()
                        .HasForeignKey("ModificateurId");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Entreprise", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Createur")
                        .WithMany()
                        .HasForeignKey("CreateurId");

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "FormateurDernierContact")
                        .WithMany()
                        .HasForeignKey("FormateurIdDernierContact");

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "StagiaireDernier")
                        .WithMany()
                        .HasForeignKey("StagiaireIdDernierContact");

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeDomaine", "TypeDomaine")
                        .WithMany()
                        .HasForeignKey("TypeDomaineId");

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeEntreprise", "TypeEntreprise")
                        .WithMany()
                        .HasForeignKey("TypeEntrepriseId");

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeMoyen", "TypeMoyen")
                        .WithMany()
                        .HasForeignKey("TypeMoyenId");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.EntrepriseMetier", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeMetier", "TypeMetier")
                        .WithMany()
                        .HasForeignKey("TypeMetierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.EntrepriseOffre", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeOffre", "TypeOffre")
                        .WithMany()
                        .HasForeignKey("TypeOffreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Exercice", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.Theory", "Theory")
                        .WithMany()
                        .HasForeignKey("TheoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.ExerciceAlone", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.HomeworkV2", "HomeworkV2")
                        .WithMany()
                        .HasForeignKey("HomeworkV2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Homework", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.HomeworkType", "HomeworkType")
                        .WithMany()
                        .HasForeignKey("HomeworkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkStudent", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.Homework", "Homework")
                        .WithMany()
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkV2", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.HomeworkType", "HomeworkType")
                        .WithMany()
                        .HasForeignKey("HomeworkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkV2Student", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.Exercice", "Exercice")
                        .WithMany()
                        .HasForeignKey("ExerciceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.HomeworkV2StudentExerciceAlone", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ExerciceAlone", "ExerciceAlone")
                        .WithMany()
                        .HasForeignKey("ExerciceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.SchoolClassRoomExplanation", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.SchoolClassRoom", "SchoolClassRoom")
                        .WithMany()
                        .HasForeignKey("SchoolClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Session", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.SchoolClassRoom", "SchoolClassRoom")
                        .WithMany()
                        .HasForeignKey("SchoolClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.SessionNumber", "SessionNumber")
                        .WithMany()
                        .HasForeignKey("SessionNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.SessionStudent", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.SessionTeacher", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Stage", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Createur")
                        .WithMany()
                        .HasForeignKey("CreateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Stagiaire")
                        .WithMany()
                        .HasForeignKey("StagiaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeAnnonce", "TypeAnnonce")
                        .WithMany()
                        .HasForeignKey("TypeAnnonceId");

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeMetier", "TypeMetier")
                        .WithMany()
                        .HasForeignKey("TypeMetierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.TypeStage", "TypeStage")
                        .WithMany()
                        .HasForeignKey("TypeStageId");
                });

            modelBuilder.Entity("IdentityServerAspNetIdentity.Models.Theory", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.HomeworkV2", "HomeworkV2")
                        .WithMany()
                        .HasForeignKey("HomeworkV2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityServerAspNetIdentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
